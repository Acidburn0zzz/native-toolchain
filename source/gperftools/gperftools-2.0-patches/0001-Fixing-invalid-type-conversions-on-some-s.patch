From 3c8bc319a60e2180c659117b77cab7956c6e4fca Mon Sep 17 00:00:00 2001
From: Sean Mackrory <sean@cloudera.com>
Date: Mon, 30 Jun 2014 20:22:18 +0000
Subject: Fixing invalid type conversions on some systems.

    Compilation of gperftools fails on some operating systems with a compiler
    error due to an invalid conversion from signinfo_t. gpertools issue #444
    fixes this by using siginfo instead, however on Ubuntu 14.04 this is also
    an invalid conversion, and int appears to be the only type that is a valid
    conversion across all support distros.

    See: https://code.google.com/p/gperftools/issues/detail?id=444

Change-Id: Ie71b4bb8babb4d0403b59973e2ddf5e32f10d12b
(cherry picked from commit 9a677b99b782d8b7dd8fa2391a427936f0a591ac)
Reviewed-on: http://gerrit.sjc.cloudera.com:8080/4063
Reviewed-by: Sean Mackrory <sean@cloudera.com>
Tested-by: Sean Mackrory <sean@cloudera.com>
---
 thirdparty/gperftools-2.0/src/base/linux_syscall_support.h | 7 +++----
 thirdparty/gperftools-2.0/src/base/linuxthreads.cc         | 2 +-
 thirdparty/gutil/linux_syscall_support.h                   | 6 +++---
 3 files changed, 7 insertions(+), 8 deletions(-)

diff --git a/thirdparty/gperftools-2.0/src/base/linux_syscall_support.h b/thirdparty/gperftools-2.0/src/base/linux_syscall_support.h
index 99dac9e..90a3602 100644
--- a/gperftools-2.0/src/base/linux_syscall_support.h
+++ b/gperftools-2.0/src/base/linux_syscall_support.h
@@ -243,14 +243,13 @@ struct kernel_rusage {
   long               ru_nivcsw;
 };

-struct siginfo;
 #if defined(__i386__) || defined(__arm__) || defined(__PPC__)

 /* include/asm-{arm,i386,mips,ppc}/signal.h                                  */
 struct kernel_old_sigaction {
   union {
     void             (*sa_handler_)(int);
-    void             (*sa_sigaction_)(int, struct siginfo *, void *);
+    void             (*sa_sigaction_)(int, int *, void *);
   };
   unsigned long      sa_mask;
   unsigned long      sa_flags;
@@ -287,13 +286,13 @@ struct kernel_sigaction {
   unsigned long      sa_flags;
   union {
     void             (*sa_handler_)(int);
-    void             (*sa_sigaction_)(int, struct siginfo *, void *);
+    void             (*sa_sigaction_)(int, int *, void *);
   };
   struct kernel_sigset_t sa_mask;
 #else
   union {
     void             (*sa_handler_)(int);
-    void             (*sa_sigaction_)(int, struct siginfo *, void *);
+    void             (*sa_sigaction_)(int, int *, void *);
   };
   unsigned long      sa_flags;
   void               (*sa_restorer)(void);
diff --git a/gperftools-2.0/src/base/linuxthreads.cc b/gperftools-2.0/src/base/linuxthreads.cc
index 19da400..3685edf 100644
--- a/gperftools-2.0/src/base/linuxthreads.cc
+++ b/gperftools-2.0/src/base/linuxthreads.cc
@@ -193,7 +193,7 @@ static volatile int *sig_pids, sig_num_threads, sig_proc, sig_marker;
 /* Signal handler to help us recover from dying while we are attached to
  * other threads.
  */
-static void SignalHandler(int signum, siginfo_t *si, void *data) {
+static void SignalHandler(int signum, int *si, void *data) {
   if (sig_pids != NULL) {
     if (signum == SIGABRT) {
       while (sig_num_threads-- > 0) {
diff --git a/gutil/linux_syscall_support.h b/gutil/linux_syscall_support.h
index 3e45854..59d1dcc 100644
--
2.2.2
